{"version":3,"sources":["service/api.js","components/Header.jsx","components/Footer.jsx","components/Albumgriditem.jsx","components/Albumgrid.jsx","components/Albumdetail.jsx","components/Search.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["retrieveAlbums","entity","term","a","fetch","response","json","jsonBody","results","JSON","stringify","retrieveAlbum","id","length","Header","text","style","marginTop","marginBottom","fontSize","Footer","textAlign","AlbumGridItem","title","price","thumbnail","artistName","artist","currency","releaseDate","collectionType","textDecoration","to","border","backgroundColor","borderRadius","padding","height","boxShadow","src","alt","margin","fontFamily","color","fontWeight","substring","display","justifyContent","Date","getFullYear","AlbumGrid","albums","gridTemplateColumns","rowGap","columnGap","map","album","collectionId","artistId","artworkUrl100","collectionPrice","collectionName","AlbumDetails","albumId","useParams","useState","details","setDetails","useEffect","getDetails","width","primaryGenreName","copyright","Search","onClick","searchField","setSearchField","errorField","setErrorField","submitted","setSubmitted","divSearch","borderBottom","background","outline","type","placeholder","onChange","e","target","value","alignItems","className","MyAlbum","setAlbums","isSending","setIsSending","sendRequest","useCallback","searchArtist","handleSearchClicked","console","log","path","exact","render","props","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.dec31e97.chunk.js","sourcesContent":["async function retrieveAlbums(entity, term) {\n    try {\n        if (!term) return [];\n        const response = await fetch(`/search?entity=${entity}&term=${term}`)\n        const jsonBody = await response.json()\n        return jsonBody.results\n    } catch (error) {\n        return [{\n            'error': `Unable to retrieve ${entity}`,\n            'more': JSON.stringify(error)\n        }]\n    }\n}\n\nasync function retrieveAlbum(entity, id) {\n    try {\n        const response = await fetch(`/lookup?id=${id}&entity=${entity}`)\n        const jsonBody = await response.json()\n        return (!!jsonBody.results && !!jsonBody.results.length) ? jsonBody.results[0] : {}\n    } catch (error) {\n        return [{\n            'error': `Unable to retrieve album id ${id}`,\n            'more': JSON.stringify(error)\n        }]\n    }\n}\n\nexport { retrieveAlbums, retrieveAlbum }","import PropTypes from 'prop-types'\n\nconst Header = ({ text }) => {\n    const style = {\n        marginTop: '10px',\n        marginBottom: '20px',\n        fontSize: '25px'\n    }\n\n    return (\n        <header style={style}>\n            <h1>{text}</h1>\n        </header>\n    )\n}\n\nHeader.propTypes = {\n    text: PropTypes.string\n}\n\nexport default Header;","const Footer = () => {\n    const style = {\n        marginTop: '30px',\n        textAlign: 'center',\n        fontSize: '10px',\n    }\n\n    return (\n        <footer style={style}>\n            <p> Ago/2021 </p>\n        </footer>\n    )\n}\n\nexport default Footer;","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst AlbumGridItem = ({ id, title, price, thumbnail, artist, artistName, currency, releaseDate, collectionType }) => {\n\n\n    const maxTextLength = 30;\n    const linkStype = {\n        textDecoration: 'none',                   \n    }\n       \n   const titleStyle = {\n    fontWeight:'bold',\n    fontSize: '16px',       \n    marginTop: '5px',  \n   }\n\n   const mediaStyle = {\n    fontWeight:'none',\n    fontSize: '12px',     \n    textAlign:'left',\n    margin: '0px',\n   }\n\n    const divStyle = {\n         border: `solid 3px none`,\n         backgroundColor: 'white',                  \n        borderRadius: '5px',\n        padding: '10px',\n        height: '230px',\n        boxShadow: '10px 5px 5px lightgrey'\n    }\n\n    const imgStyle = {\n        borderRadius: '5px',\n        height: '150px',\n    }\n\n    const priceStyle = {\n        textAlign: 'right',\n        fontSize: '10px',\n        fontWeight: 'none',\n        margin: '0px',\n        padding: '5px',\n        \n    }\n\n    const artistStle = {\n        margin: '0px',\n        fontFamily: `'Roboto Condensed', sans-serif`,\n        //borderBottom: `5px solid red`,\n        color: 'black',\n        fontSize: 'x-large'\n    }\n    \n    const divMedia = {\n        display: 'flex',\n        justifyContent: 'space-between',      \n    }\n\n    return ( \n        <Link style={linkStype} to={`/album/${id}`}>\n            <div style={divStyle} >\n                <img src={thumbnail} style={imgStyle} alt={artistName} />\n                <h1 style={artistStle}>{artistName}</h1>\n                <h2 style={titleStyle}>{title.length > maxTextLength ? `${title.substring(0, maxTextLength)}...` : title }</h2>\n                <div style={divMedia}>\n                <h3 style={mediaStyle}>{collectionType} {`${new Date(releaseDate).getFullYear()}`}</h3>\n                <p style={priceStyle} >$ {price} {currency}</p>\n                </div>\n            </div>\n        </Link>\n     )\n}\n\nAlbumGridItem.propTypes = {\n    id: PropTypes.number,\n    title: PropTypes.string,\n    price: PropTypes.number,\n    thumbnail: PropTypes.string,\n    artist: PropTypes.number,\n    artistName: PropTypes.string, \n    currency: PropTypes.string, \n    releaseDate: PropTypes.string,\n    collectionType: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    accentColor: PropTypes.string,\n    textColor: PropTypes.string,\n}\n\nexport default AlbumGridItem;","import PropTypes from 'prop-types'\nimport AlbumGridItem from './Albumgriditem';\n\nconst AlbumGrid = ({ albums }) => {\n    const style = {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',        \n        rowGap: '20px',\n        columnGap: '20px',\n    }\n\n    return ( \n        <div style={style}>\n            {albums.map(album => (\n                <AlbumGridItem\n                    key={album.collectionId}\n                    id={album.collectionId}                    \n                    artist={album.artistId}\n                    artistName={album.artistName}\n                    thumbnail={album.artworkUrl100}                    \n                    price={((!album.collectionPrice) ? 'N/A' : album.collectionPrice)}\n                    currency={album.currency}\n                    releaseDate={album.releaseDate}\n                    collectionType={album.collectionType}\n                    title={album.collectionName} />\n            ))}\n        </div>\n    )\n}\n\nAlbumGrid.propTypes = {\n    albums: PropTypes.array.isRequired\n}\n\nexport default AlbumGrid;","import { Link } from 'react-router-dom'\nimport { useParams } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport {retrieveAlbum} from '../service/api'\nimport Header from './Header'\n\nconst AlbumDetails = () => {\n    const { albumId } = useParams()\n    const [details, setDetails] = useState({})\n\n    useEffect(() => {\n        const getDetails = async () => {\n            const album = await retrieveAlbum('album', albumId)            \n            setDetails(album)\n        }\n        getDetails()\n    }, [albumId])\n\n    const returnButtonStyle = {\n        backgroundColor: 'whitesmoke',        \n        borderRadius: '5px',\n        padding: '5px 20px',        \n        marginBottom: '20px',\n        width: '100px'\n    }\n\n    const contentStyle = {\n        backgroundColor: 'whitesmoke',\n        borderRadius: '5px',\n        padding: '20px',\n    }\n\n    const detailStyle = {        \n        borderRadius: '5px',\n        padding: '20px',\n        textAlign: 'left'\n    }\n\n    const imgStyle = {        \n        borderRadius: '5px',        \n        height: '300px',\n        marginBottom: '50px'\n    }\n\n    return (\n        <div>\n            <div style={returnButtonStyle}>\n                <Link to='/'>Return</Link>\n            </div>\n            <Header text={details.collectionName} />\n            <div style={contentStyle}>\n                <img src={details.artworkUrl100} alt={details.artistName} style={imgStyle} />\n                <div style={detailStyle}>\n                    <p>Artist: {details.artistName}</p>\n                    <p>Price: $ {details.collectionPrice} {details.currency}</p>\n                    <p>Genre: {details.primaryGenreName}</p>\n                    <p>{details.copyright}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AlbumDetails;","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst Search = ({onClick}) => {\n    \nconst [searchField, setSearchField] = useState(\"\");\nconst [errorField, setErrorField] = useState(true);\nconst [submitted, setSubmitted] = useState(false);\n  \n\n  const handleChange = e => {\n    setSearchField(e.target.value);    \n    setErrorField((!e.target.value));\n  };\n\n  const divSearch = {\n    display: 'flex',\n    justifyContent: 'flex-start',      \n    margin:' 30px 50px 30px 50px',    \n    width: '400px',\n    borderBottom: `solid 2px ${((submitted && errorField)? 'red':'grey' )}`,\n}\n\nconst buttonStyle = {    \n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '10%',\n    height: '30px',\n    \n}\n\nconst searchStyle = {    \n    width: '90%',\n    border: 'none',\n    background: 'none',\n    outline: 'none',\n}\n\n\n  return (\n    <section>\n      <div style={divSearch}>      \n        <input     style={searchStyle}              \n          type = \"text\" \n          placeholder = \"Search by artist\" \n          onChange = {handleChange}\n        />\n        <button style={buttonStyle} onClick={()=>{setSubmitted(true);onClick(searchField);}}><i className=\"fas fa-search\"></i></button>\n      </div>      \n    </section>\n  );\n}\n\nSearch.propTypes = {\n    onClick: PropTypes.func\n}\nexport default Search;","import { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { useState, useCallback } from 'react'\nimport { retrieveAlbums } from './service/api'\nimport './fonts.css'\n\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport AlbumGrid from './components/Albumgrid';\nimport AlbumDetails from './components/Albumdetail';\nimport Search from './components/Search';\n\n\n\nfunction MyAlbum() {\n  const style = {\n    background: 'whitesmoke',\n    textAlign: 'center',\n    borderRadius: '7px',\n    padding: '10px',\n    fontFamily: `'Lato', sans-serif`\n  }\n\n  const [albums, setAlbums] = useState([])\n  const [isSending, setIsSending] = useState(false)\n  const sendRequest = useCallback(async (searchArtist) => {\n    // don't send again while we are sending\n    if (isSending) return\n    // update state\n    setIsSending(true)\n    // send the actual request\n    const albums = await retrieveAlbums('album', searchArtist)\n    setAlbums(albums)\n    // once the request is sent, update state again\n    setIsSending(false)\n  }, [isSending]) // update the callback if the state changes\n\n\n  const handleSearchClicked = (searchArtist) => {\n    console.log('child clicked', searchArtist);\n    sendRequest(searchArtist);\n  }\n\n  return (\n    <Router>\n      <div style={style} className='App'>\n        <Route path='/' exact render={(props) => (\n          <>\n            <Header text='Albums Catalog' />         \n            <Search onClick={handleSearchClicked}/>   \n            <section>\n              <AlbumGrid albums={albums} />\n            </section>\n          </>\n        )} />\n        <Route path='/album/:albumId' component={AlbumDetails} />\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default MyAlbum;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}